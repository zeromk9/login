RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\.dart_tool\dartpad\web_plugin_registrant.dart
NOMBRE_DEL_ARCHIVO: web_plugin_registrant.dart
CONTENIDO:
// Flutter web plugin registrant file.
//
// Generated file. Do not edit.
//

// @dart = 2.13
// ignore_for_file: type=lint

import 'package:flutter_secure_storage_web/flutter_secure_storage_web.dart';
import 'package:flutter_web_plugins/flutter_web_plugins.dart';

void registerPlugins([final Registrar? pluginRegistrar]) {
  final Registrar registrar = pluginRegistrar ?? webPluginRegistrar;
  FlutterSecureStorageWeb.registerWith(registrar);
  registrar.registerMessageHandler();
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\.dart_tool\flutter_build\dart_plugin_registrant.dart
NOMBRE_DEL_ARCHIVO: dart_plugin_registrant.dart
CONTENIDO:
//
// Generated file. Do not edit.
// This file is generated from template in file `flutter_tools/lib/src/flutter_plugins.dart`.
//

// @dart = 3.1

import 'dart:io'; // flutter_ignore: dart_io_import.
import 'package:path_provider_android/path_provider_android.dart';
import 'package:path_provider_foundation/path_provider_foundation.dart';
import 'package:path_provider_linux/path_provider_linux.dart';
import 'package:path_provider_foundation/path_provider_foundation.dart';
import 'package:flutter_secure_storage_windows/flutter_secure_storage_windows.dart';
import 'package:path_provider_windows/path_provider_windows.dart';

@pragma('vm:entry-point')
class _PluginRegistrant {

  @pragma('vm:entry-point')
  static void register() {
    if (Platform.isAndroid) {
      try {
        PathProviderAndroid.registerWith();
      } catch (err) {
        print(
          '`path_provider_android` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isIOS) {
      try {
        PathProviderFoundation.registerWith();
      } catch (err) {
        print(
          '`path_provider_foundation` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isLinux) {
      try {
        PathProviderLinux.registerWith();
      } catch (err) {
        print(
          '`path_provider_linux` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isMacOS) {
      try {
        PathProviderFoundation.registerWith();
      } catch (err) {
        print(
          '`path_provider_foundation` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isWindows) {
      try {
        FlutterSecureStorageWindows.registerWith();
      } catch (err) {
        print(
          '`flutter_secure_storage_windows` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        PathProviderWindows.registerWith();
      } catch (err) {
        print(
          '`path_provider_windows` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    }
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\main.dart
NOMBRE_DEL_ARCHIVO: main.dart
CONTENIDO:
// ignore_for_file: prefer_const_constructors

import 'package:flutter/material.dart';
import 'package:login/screens/home_screen.dart';
import 'package:login/screens/login_screen.dart';
import 'package:login/screens/registrar_screen.dart';

void main() => runApp(const AppState());

class AppState extends StatelessWidget {
  const AppState({super.key});
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'LOGIN',
      initialRoute: '/home',
      routes: {
        '/home': (_) => HomeScreen(),
        '/login': (_) => LoginScreen(),
        '/registrar': (_) => RegistrarScreen(),
      },
    );
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\Colors\app_colors.dart
NOMBRE_DEL_ARCHIVO: app_colors.dart
CONTENIDO:
import 'package:flutter/material.dart';

class AppColors {
  // Colores inspirados en Monster Hunter (alternativos)
  static const Color primaryColor = Color(0xFFD84315); // Rojo oscuro
  static const Color accentColor = Color(0xFFBF360C); // Rojo mÃ¡s oscuro
  static const Color secondaryColor = Color(0xFF37474F); // Gris oscuro/azul
  static const Color buttonGreenColor = Color(0xFF4CAF50); // Verde oscuro
  static const Color buttonBrownColor = Color(0xFF795548); // MarrÃ³n oscuro
}

class AppColorsV2 {
  // Colores inspirados en Monster Hunter (alternativos)
  static const Color primaryColor = Color(0xFFad5d5d); // MarrÃ³n
  static const Color accentColor = Color(0xFFd8ae47); // Amarillo
  static const Color secondaryColor = Color(0xFF92b6d5); // Azul
  static const Color buttonGreenColor = Color(0xFF006e51); // Verde
  static const Color buttonBrownColor = Color(0xFFaf9483); // MarrÃ³n mÃ¡s claro
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\screens\home_screen.dart
NOMBRE_DEL_ARCHIVO: home_screen.dart
CONTENIDO:
// ignore_for_file: prefer_const_constructors, sort_child_properties_last

import 'package:flutter/material.dart';
import 'login_screen.dart';
import 'registrar_screen.dart';
import 'package:login/Colors/app_colors.dart';

class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('My App'),
        backgroundColor: AppColors.primaryColor,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text(
              'WELCOME',
              style: TextStyle(
                fontSize: 32,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 40),
            Image.asset(
              'assets/imgs/login.jpg',
              height: 150,
              width: 150,
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const LoginScreen()),
                );
              },
              child: const Text('LOGIN'),
              style: ElevatedButton.styleFrom(
                backgroundColor: AppColors.buttonGreenColor,
              ),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                      builder: (context) => const RegistrarScreen()),
                );
              },
              child: const Text('REGISTRAR'),
              style: ElevatedButton.styleFrom(
                backgroundColor: AppColors.buttonBrownColor,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\screens\login_screen.dart
NOMBRE_DEL_ARCHIVO: login_screen.dart
CONTENIDO:
// ignore_for_file: prefer_const_constructors, sort_child_properties_last

import 'package:flutter/material.dart';
import 'registrar_screen.dart';
import 'package:login/Colors/app_colors.dart';

class LoginScreen extends StatelessWidget {
  const LoginScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Login'),
        backgroundColor: AppColors.accentColor,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: TextField(
                decoration: const InputDecoration(
                  hintText: 'Email',
                ),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: TextField(
                obscureText: true,
                decoration: const InputDecoration(
                  hintText: 'Password',
                ),
              ),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // FunciÃ³n a ejecutar al hacer clic en "LOGIN"
                // Por ahora, no haremos nada.
              },
              child: const Text('LOGIN'),
              style: ElevatedButton.styleFrom(
                backgroundColor: AppColors.buttonGreenColor,
              ),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                      builder: (context) => const RegistrarScreen()),
                );
              },
              child: const Text('REGISTRAR'),
              style: ElevatedButton.styleFrom(
                backgroundColor: AppColors.buttonBrownColor,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\screens\registrar_screen.dart
NOMBRE_DEL_ARCHIVO: registrar_screen.dart
CONTENIDO:
// ignore_for_file: prefer_const_constructors, sort_child_properties_last

import 'package:flutter/material.dart';
import 'package:login/Colors/app_colors.dart';

class RegistrarScreen extends StatelessWidget {
  const RegistrarScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Registrar'),
        backgroundColor: AppColors.secondaryColor,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: TextField(
                decoration: const InputDecoration(
                  hintText: 'Email (Registro)',
                ),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: TextField(
                obscureText: true,
                decoration: const InputDecoration(
                  hintText: 'Password (Registro)',
                ),
              ),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // FunciÃ³n a ejecutar al hacer clic en "REGISTRAR"
                // Por ahora, no haremos nada.
              },
              child: const Text('REGISTRAR'),
              style: ElevatedButton.styleFrom(
                backgroundColor: AppColors.buttonBrownColor,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\test\widget_test.dart
NOMBRE_DEL_ARCHIVO: widget_test.dart
CONTENIDO:
/* // This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility in the flutter_test package. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:login/main.dart';

void main() {
  testWidgets('Counter increments smoke test', (WidgetTester tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(const MyApp());

    // Verify that our counter starts at 0.
    expect(find.text('0'), findsOneWidget);
    expect(find.text('1'), findsNothing);

    // Tap the '+' icon and trigger a frame.
    await tester.tap(find.byIcon(Icons.add));
    await tester.pump();

    // Verify that our counter has incremented.
    expect(find.text('0'), findsNothing);
    expect(find.text('1'), findsOneWidget);
  });
}
 */
====================================================================================================RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\.dart_tool\dartpad\web_plugin_registrant.dart
NOMBRE_DEL_ARCHIVO: web_plugin_registrant.dart
CONTENIDO:
// Flutter web plugin registrant file.
//
// Generated file. Do not edit.
//

// @dart = 2.13
// ignore_for_file: type=lint

import 'package:flutter_secure_storage_web/flutter_secure_storage_web.dart';
import 'package:flutter_web_plugins/flutter_web_plugins.dart';

void registerPlugins([final Registrar? pluginRegistrar]) {
  final Registrar registrar = pluginRegistrar ?? webPluginRegistrar;
  FlutterSecureStorageWeb.registerWith(registrar);
  registrar.registerMessageHandler();
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\.dart_tool\flutter_build\dart_plugin_registrant.dart
NOMBRE_DEL_ARCHIVO: dart_plugin_registrant.dart
CONTENIDO:
//
// Generated file. Do not edit.
// This file is generated from template in file `flutter_tools/lib/src/flutter_plugins.dart`.
//

// @dart = 3.1

import 'dart:io'; // flutter_ignore: dart_io_import.
import 'package:path_provider_android/path_provider_android.dart';
import 'package:path_provider_foundation/path_provider_foundation.dart';
import 'package:path_provider_linux/path_provider_linux.dart';
import 'package:path_provider_foundation/path_provider_foundation.dart';
import 'package:flutter_secure_storage_windows/flutter_secure_storage_windows.dart';
import 'package:path_provider_windows/path_provider_windows.dart';

@pragma('vm:entry-point')
class _PluginRegistrant {

  @pragma('vm:entry-point')
  static void register() {
    if (Platform.isAndroid) {
      try {
        PathProviderAndroid.registerWith();
      } catch (err) {
        print(
          '`path_provider_android` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isIOS) {
      try {
        PathProviderFoundation.registerWith();
      } catch (err) {
        print(
          '`path_provider_foundation` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isLinux) {
      try {
        PathProviderLinux.registerWith();
      } catch (err) {
        print(
          '`path_provider_linux` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isMacOS) {
      try {
        PathProviderFoundation.registerWith();
      } catch (err) {
        print(
          '`path_provider_foundation` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isWindows) {
      try {
        FlutterSecureStorageWindows.registerWith();
      } catch (err) {
        print(
          '`flutter_secure_storage_windows` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        PathProviderWindows.registerWith();
      } catch (err) {
        print(
          '`path_provider_windows` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    }
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\main.dart
NOMBRE_DEL_ARCHIVO: main.dart
CONTENIDO:
// main.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import 'screens/screens.dart';
import 'services/services.dart';
import 'providers/providers.dart';

void main() => runApp(
      MultiProvider(
        providers: [
          ChangeNotifierProvider(create: (_) => AuthService()),
          ChangeNotifierProvider(create: (_) => TemaManager()),
        ],
        child: const AppState(),
      ),
    );

class AppState extends StatelessWidget {
  const AppState({super.key});

  @override
  Widget build(BuildContext context) {
    return const MyApp();
  }
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'LOGIN TO MY APP',
      initialRoute: 'home',
      routes: {
        'login': (_) => const LoginScreen(),
        'register': (_) => const RegistrarScreen(),
        'home': (_) => const HomeScreen(),
        'checking': (_) => const CheckAuthScreen(),
        'main': (_) => const MainScreen(),
      },
      scaffoldMessengerKey: NotificationsService.messengerKey,
      theme: ThemeData.light().copyWith(
          scaffoldBackgroundColor: Colors.black54,
          appBarTheme: const AppBarTheme(elevation: 0, color: Colors.redAccent),
          floatingActionButtonTheme: const FloatingActionButtonThemeData(
              backgroundColor: Colors.redAccent, elevation: 0)),
    );
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\Colors\app_colors.dart
NOMBRE_DEL_ARCHIVO: app_colors.dart
CONTENIDO:
import 'package:flutter/material.dart';

class AppColors {
  // Colores para el tema original
  static const Color primaryColor = Color(0xFFAD5D5D); // Rojo oscuro
  static const Color accentColor = Color(0xFFD8AE47); // Amarillo oscuro
  static const Color secondaryColor = Color(0xFF92B6D5); // Azul claro/oscuro
  static const Color buttonGreenColor = Color(0xFF006E51); // Verde oscuro
  static const Color buttonBrownColor =
      Color(0xFFAF947E); // MarrÃ³n claro/oscuro

  // Colores para el tema de hielo
  static const Color icePrimaryColor = Color(0xFF64B5F6); // Azul claro
  static const Color iceAccentColor = Color(0xFF1976D2); // Azul mÃ¡s oscuro
  static const Color iceSecondaryColor = Color(0xFF455A64); // Gris azulado
  static const Color iceButtonGreenColor = Color(0xFF00E676); // Verde claro

  // Colores para el tema de fuego
  static const Color firePrimaryColor = Color(0xFFFF7043); // Naranja claro
  static const Color fireAccentColor = Color(0xFFFF3D00); // Naranja mÃ¡s oscuro
  static const Color fireSecondaryColor = Color(0xFFBDBDBD); // Gris claro
  static const Color fireButtonGreenColor = Color(0xFF388E3C); // Verde oscuro

  // Estilos de texto para cada tema
  static const TextStyle titulo = TextStyle(
    fontSize: 24,
    fontWeight: FontWeight.bold,
    color: Colors.white,
  );

  static const TextStyle subtitulo = TextStyle(
    fontSize: 18,
    fontWeight: FontWeight.normal,
    color: Colors.white,
  );

  static const TextStyle botonTexto = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.bold,
    color: Colors.white,
  );

  static const TextStyle hintTexto = TextStyle(
    fontSize: 16,
    color: Colors.grey,
  );
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\providers\login_provider.dart
NOMBRE_DEL_ARCHIVO: login_provider.dart
CONTENIDO:
// login_provider.dart

// ignore_for_file: avoid_print

import 'package:flutter/material.dart';

class LoginFormProvider extends ChangeNotifier {
  GlobalKey<FormState> formKey = GlobalKey<FormState>();

  String email = '';
  String password = '';

  bool _isLoading = false;
  bool get isLoading => _isLoading;

  set isLoading(bool value) {
    _isLoading = value;
    notifyListeners();
  }

  Future<String?> getEmail() async {
    // Puedes agregar lÃ³gica adicional aquÃ­ si es necesario.
    // Por ejemplo, podrÃ­as realizar una llamada a la base de datos o autenticaciÃ³n.

    // Simplemente retornamos el email, pero podrÃ­as personalizarlo segÃºn tus necesidades.
    return email.isNotEmpty ? email : null;
  }

  bool isValidForm() {
    print(formKey.currentState?.validate());

    print('$email - $password');

    return formKey.currentState?.validate() ?? false;
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\providers\providers.dart
NOMBRE_DEL_ARCHIVO: providers.dart
CONTENIDO:
export '../providers/login_provider.dart';
export '../providers/theme_color_provider.dart';

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\providers\theme_color_provider.dart
NOMBRE_DEL_ARCHIVO: theme_color_provider.dart
CONTENIDO:
// theme_manager.dart
import 'package:flutter/material.dart';
import '../Colors/app_colors.dart';

class TemaManager extends ChangeNotifier {
  late ThemeData _tema;
  late String _imagenTema;

  TemaManager() {
    _tema = _obtenerTemaOriginal();
    _imagenTema = 'assets/imgs/normal.jpg';
  }

  ThemeData get tema => _tema;
  String get imagenTema => _imagenTema;

  ThemeData _obtenerTemaOriginal() {
    return ThemeData(
      scaffoldBackgroundColor: AppColors.primaryColor,
      textTheme: _obtenerTextoTemaOriginal(),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: AppColors.buttonGreenColor,
        ),
      ),
    );
  }

  ThemeData _obtenerTemaHielo() {
    _imagenTema = 'assets/imgs/ice.jpg';
    return ThemeData(
      scaffoldBackgroundColor: AppColors.icePrimaryColor,
      textTheme: _obtenerTextoTemaHielo(),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: AppColors.iceButtonGreenColor,
        ),
      ),
    );
  }

  ThemeData _obtenerTemaFuego() {
    _imagenTema = 'assets/imgs/fire.jpg';
    return ThemeData(
      scaffoldBackgroundColor: AppColors.firePrimaryColor,
      textTheme: _obtenerTextoTemaFuego(),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: AppColors.fireButtonGreenColor,
        ),
      ),
    );
  }

  TextTheme _obtenerTextoTemaOriginal() {
    return const TextTheme(
      displayLarge: AppColors.titulo,
      displayMedium: AppColors.subtitulo,
      labelLarge: AppColors.botonTexto,
      bodyMedium: AppColors.hintTexto,
    );
  }

  TextTheme _obtenerTextoTemaHielo() {
    return TextTheme(
      displayLarge: AppColors.titulo.copyWith(color: Colors.white),
      displayMedium: AppColors.subtitulo.copyWith(color: Colors.white),
      labelLarge: AppColors.botonTexto.copyWith(color: Colors.white),
      bodyMedium: AppColors.hintTexto,
    );
  }

  TextTheme _obtenerTextoTemaFuego() {
    return TextTheme(
      displayLarge:
          AppColors.titulo.copyWith(fontSize: 26, color: Colors.orange),
      displayMedium:
          AppColors.subtitulo.copyWith(fontSize: 20, color: Colors.orange),
      labelLarge: AppColors.botonTexto.copyWith(color: Colors.white),
      bodyMedium: AppColors.hintTexto,
    );
  }

  void cambiarTema(Tema nuevoTema) {
    switch (nuevoTema) {
      case Tema.original:
        _tema = _obtenerTemaOriginal();
        break;
      case Tema.hielo:
        _tema = _obtenerTemaHielo();
        break;
      case Tema.fuego:
        _tema = _obtenerTemaFuego();
        break;
    }
    notifyListeners();
  }
}

enum Tema { original, hielo, fuego }

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\screens\check_auth_screen.dart
NOMBRE_DEL_ARCHIVO: check_auth_screen.dart
CONTENIDO:
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '/services/services.dart';
import 'screens.dart';

class CheckAuthScreen extends StatelessWidget {
  const CheckAuthScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<AuthService>(context, listen: false);

    return Scaffold(
      body: Center(
        child: FutureBuilder(
          future: authService.readToken(),
          builder: (BuildContext context, AsyncSnapshot<String> snapshot) {
            if (!snapshot.hasData) return const Text('');

            if (snapshot.data == '') {
              Future.microtask(() {
                Navigator.pushReplacement(
                    context,
                    PageRouteBuilder(
                        pageBuilder: (_, __, ___) => const LoginScreen(),
                        transitionDuration: const Duration(seconds: 0)));
              });
            } else {
              Future.microtask(() {
                Navigator.pushReplacement(
                    context,
                    PageRouteBuilder(
                        pageBuilder: (_, __, ___) => const HomeScreen(),
                        transitionDuration: const Duration(seconds: 0)));
              });
            }

            return Container();
          },
        ),
      ),
    );
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\screens\home_screen.dart
NOMBRE_DEL_ARCHIVO: home_screen.dart
CONTENIDO:
// ignore_for_file: prefer_const_constructors, sort_child_properties_last

import 'package:flutter/material.dart';
import 'login_screen.dart';
import 'registrar_screen.dart';
import '/Colors/app_colors.dart';

class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('My App'),
        backgroundColor: AppColors.primaryColor,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text(
              'WELCOME',
              style: TextStyle(
                fontSize: 30,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 20),
            Image.asset(
              'assets/imgs/login.jpg',
              height: 300,
              width: 300,
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const LoginScreen()),
                );
              },
              child: const Text('LOGIN'),
              style: ElevatedButton.styleFrom(
                backgroundColor: AppColors.buttonGreenColor,
              ),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                      builder: (context) => const RegistrarScreen()),
                );
              },
              child: const Text('REGISTRARSE'),
              style: ElevatedButton.styleFrom(
                backgroundColor: AppColors.buttonBrownColor,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\screens\login_screen.dart
NOMBRE_DEL_ARCHIVO: login_screen.dart
CONTENIDO:
// ignore_for_file: prefer_const_constructors, sort_child_properties_last, use_build_context_synchronously, unnecessary_new

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '../providers/login_provider.dart';
import '../services/services.dart';
import '../ui/input_decorations.dart';
import '../widgets/widgets.dart';

class LoginScreen extends StatelessWidget {
  const LoginScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // body: AuthBackground(
      body: SingleChildScrollView(
        child: Column(
          children: [
            const SizedBox(height: 250),
            CardContainer(
              child: Column(
                children: [
                  const SizedBox(height: 10),
                  Text('Login',
                      style: Theme.of(context).textTheme.headlineMedium),
                  const SizedBox(height: 30),
                  ChangeNotifierProvider(
                    create: (_) => LoginFormProvider(),
                    child: _LoginForm(),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 50),
            TextButton(
              onPressed: () =>
                  Navigator.pushReplacementNamed(context, 'register'),
              style: ButtonStyle(
                overlayColor: MaterialStateProperty.all(
                  Colors.redAccent.withOpacity(0.1),
                ),
                shape: MaterialStateProperty.all(StadiumBorder()),
              ),
              child: const Text(
                'Crear una nueva cuenta',
                style: TextStyle(fontSize: 18, color: Colors.white),
              ),
            ),
            const SizedBox(height: 50),
          ],
        ),
      ),
    );
  }
}

class _LoginForm extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final loginForm = Provider.of<LoginFormProvider>(context);

    return Form(
      key: loginForm.formKey,
      autovalidateMode: AutovalidateMode.onUserInteraction,
      child: Column(
        children: [
          TextFormField(
            autocorrect: false,
            keyboardType: TextInputType.emailAddress,
            decoration: InputDecorations.authInputDecoration(
              hintText: 'test1@email.com',
              labelText: 'Correo electrÃ³nico',
              prefixIcon: Icons.alternate_email_rounded,
            ),
            onChanged: (value) => loginForm.email = value,
            validator: (value) {
              String pattern =
                  r'^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$';
              RegExp regExp = new RegExp(pattern);

              return regExp.hasMatch(value ?? '')
                  ? null
                  : 'El valor ingresado no luce como un correo';
            },
          ),
          const SizedBox(height: 30),
          TextFormField(
            autocorrect: false,
            obscureText: true,
            keyboardType: TextInputType.emailAddress,
            decoration: InputDecorations.authInputDecoration(
              hintText: 'Test1@',
              labelText: 'ContraseÃ±a',
              prefixIcon: Icons.lock_outline,
            ),
            onChanged: (value) => loginForm.password = value,
            validator: (value) {
              return (value != null && value.length >= 6)
                  ? null
                  : 'La contraseÃ±a debe ser de 6 caracteres';
            },
          ),
          const SizedBox(height: 30),
          MaterialButton(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(10),
            ),
            disabledColor: Colors.grey,
            elevation: 0,
            color: Colors.redAccent,
            child: Container(
              padding: EdgeInsets.symmetric(horizontal: 80, vertical: 15),
              child: Text(
                loginForm.isLoading ? 'Espere' : 'Ingresar',
                style: TextStyle(color: Colors.white),
              ),
            ),
            onPressed: loginForm.isLoading
                ? null
                : () async {
                    FocusScope.of(context).unfocus();
                    final authService =
                        Provider.of<AuthService>(context, listen: false);

                    if (!loginForm.isValidForm()) return;

                    loginForm.isLoading = true;

                    final String? errorMessage = await authService.login(
                      loginForm.email,
                      loginForm.password,
                    );

                    if (errorMessage == null) {
                      Navigator.pushReplacementNamed(context, 'home');
                    } else {
                      // print( errorMessage );
                      NotificationsService.showSnackbar(errorMessage);
                      loginForm.isLoading = false;
                    }
                  },
          ),
        ],
      ),
    );
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\screens\main_screen.dart
NOMBRE_DEL_ARCHIVO: main_screen.dart
CONTENIDO:
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '/providers/providers.dart';

class MainScreen extends StatelessWidget {
  const MainScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final loginFormProvider = Provider.of<LoginFormProvider>(context);

    return Scaffold(
      appBar: AppBar(
        title: FutureBuilder<String?>(
          future: loginFormProvider.getEmail(),
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return const Text('Welcome Hunter');
            } else if (snapshot.hasError) {
              return const Text('Welcome Hunter');
            } else {
              final nameEmail = snapshot.data ?? 'Welcome Hunter';
              return Text(nameEmail);
            }
          },
        ),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Image.asset(
              'assets/imgs/menus/welcome.gif',
              height: 300,
              width: 300,
            ),
            const SizedBox(height: 20),
            const Text(
              'Accesando to My App...',
              style: TextStyle(
                fontSize: 30,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\screens\registrar_screen.dart
NOMBRE_DEL_ARCHIVO: registrar_screen.dart
CONTENIDO:
// ignore_for_file: prefer_const_constructors, sort_child_properties_last, avoid_print, use_build_context_synchronously

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '/Colors/app_colors.dart';
import '../providers/login_provider.dart';
import '../services/services.dart';
import '../ui/input_decorations.dart';
import '../widgets/widgets.dart';

class RegistrarScreen extends StatelessWidget {
  const RegistrarScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Registrar'),
        backgroundColor: AppColors.secondaryColor,
      ),
      body: SingleChildScrollView(
        child: Column(
          children: [
            SizedBox(height: 250),
            CardContainer(
              child: Column(
                children: [
                  SizedBox(height: 10),
                  Text(
                    'Crear cuenta',
                    style: Theme.of(context).textTheme.headlineMedium,
                  ),
                  SizedBox(height: 30),
                  ChangeNotifierProvider(
                    create: (_) => LoginFormProvider(),
                    child: _LoginForm(),
                  ),
                ],
              ),
            ),
            SizedBox(height: 50),
            TextButton(
              onPressed: () => Navigator.pushReplacementNamed(context, 'login'),
              style: ButtonStyle(
                overlayColor: MaterialStateProperty.all(
                  Colors.redAccent.withOpacity(0.1),
                ),
                shape: MaterialStateProperty.all(StadiumBorder()),
              ),
              child: Text(
                'Â¿Ya tienes una cuenta?',
                style: TextStyle(fontSize: 18, color: Colors.white),
              ),
            ),
            SizedBox(height: 50),
          ],
        ),
      ),
    );
  }
}

class _LoginForm extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final loginForm = Provider.of<LoginFormProvider>(context);

    return Form(
      key: loginForm.formKey,
      autovalidateMode: AutovalidateMode.onUserInteraction,
      child: Column(
        children: [
          TextFormField(
            autocorrect: false,
            keyboardType: TextInputType.emailAddress,
            decoration: InputDecorations.authInputDecoration(
                hintText: 'test1@email.com',
                labelText: 'Correo electrÃ³nico',
                prefixIcon: Icons.alternate_email_rounded),
            onChanged: (value) => loginForm.email = value,
            validator: (value) {
              String pattern =
                  r'^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$';
              RegExp regExp = RegExp(pattern);

              return regExp.hasMatch(value ?? '')
                  ? null
                  : 'El valor ingresado no luce como un correo';
            },
          ),
          SizedBox(height: 30),
          TextFormField(
            autocorrect: false,
            obscureText: true,
            keyboardType: TextInputType.emailAddress,
            decoration: InputDecorations.authInputDecoration(
                hintText: 'Test1@',
                labelText: 'ContraseÃ±a',
                prefixIcon: Icons.lock_outline),
            onChanged: (value) => loginForm.password = value,
            validator: (value) {
              return (value != null && value.length >= 6)
                  ? null
                  : 'La contraseÃ±a debe de ser de 6 caracteres';
            },
          ),
          SizedBox(height: 30),
          MaterialButton(
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10)),
              disabledColor: Colors.grey,
              elevation: 0,
              color: Colors.redAccent,
              child: Container(
                  padding: EdgeInsets.symmetric(horizontal: 80, vertical: 15),
                  child: Text(
                    loginForm.isLoading ? 'Espere' : 'Ingresar',
                    style: TextStyle(color: Colors.white),
                  )),
              onPressed: loginForm.isLoading
                  ? null
                  : () async {
                      FocusScope.of(context).unfocus();
                      final authService =
                          Provider.of<AuthService>(context, listen: false);

                      if (!loginForm.isValidForm()) return;

                      loginForm.isLoading = true;
                      final String? errorMessage = await authService.createUser(
                          loginForm.email, loginForm.password);
                      if (errorMessage == null) {
                        Navigator.pushReplacementNamed(context, 'main');
                      } else {
                        //print(errorMessage);
                        loginForm.isLoading = false;
                      }
                    })
        ],
      ),
    );
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\screens\screens.dart
NOMBRE_DEL_ARCHIVO: screens.dart
CONTENIDO:
export 'package:login/screens/home_screen.dart';
export '/screens/login_screen.dart';
export '/screens/registrar_screen.dart';
export '/screens/check_auth_screen.dart';
export '/screens/main_screen.dart';

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\services\auth_services.dart
NOMBRE_DEL_ARCHIVO: auth_services.dart
CONTENIDO:
// ignore_for_file: avoid_print

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:http/http.dart' as http;

class AuthService extends ChangeNotifier {
  final String _baseUrl = 'loginprueba.somee.com';

  final storage = const FlutterSecureStorage();

  // Si retornamos algo, es un error, si no, todo bien!
  Future<String?> createUser(String email, String password) async {
    final Map<String, dynamic> authData = {
      'email': email,
      'password': password,
    };

    final url = Uri.http(_baseUrl, '/api/Cuentas/registrar');

    final resp = await http.post(url,
        headers: {"Content-Type": "application/json"},
        body: json.encode(authData));

    print('Response body: ${resp.body}');
    final Map<String, dynamic> decodedResp = json.decode(resp.body);

    if (decodedResp.containsKey('token')) {
      // Token hay que guardarlo en un lugar seguro
      await storage.write(key: 'token', value: decodedResp['token']);
      return null;
    } else {
      return decodedResp['error']['message'];
    }
  }

  Future<String?> login(String email, String password) async {
    final Map<String, dynamic> authData = {
      'email': email,
      'password': password
    };
    final url = Uri.http(_baseUrl, '/api/Cuentas/Login');

    final resp = await http.post(url,
        headers: {"Content-Type": "application/json"},
        body: json.encode(authData));

    final Map<String, dynamic> decodedResp = json.decode(resp.body);

    if (decodedResp.containsKey('token')) {
      // Token hay que guardarlo en un lugar seguro
      await storage.write(key: 'token', value: decodedResp['token']);
      return null;
    } else {
      return decodedResp['error']['message'];
    }
  }

  Future logout() async {
    await storage.delete(key: 'token');
    return;
  }

  Future<String> readToken() async {
    return await storage.read(key: 'token') ?? '';
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\services\notifications_services.dart
NOMBRE_DEL_ARCHIVO: notifications_services.dart
CONTENIDO:
import 'package:flutter/material.dart';

class NotificationsService {
  static GlobalKey<ScaffoldMessengerState> messengerKey =
      GlobalKey<ScaffoldMessengerState>();

  static showSnackbar(String message) {
    final snackBar = SnackBar(
      content: Text(
        message,
        style: const TextStyle(
          color: Colors.white,
          fontSize: 20,
        ),
      ),
    );
    messengerKey.currentState!.showSnackBar(snackBar);
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\services\services.dart
NOMBRE_DEL_ARCHIVO: services.dart
CONTENIDO:
export '/services/notifications_services.dart';
export '/services/auth_services.dart';

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\ui\input_decorations.dart
NOMBRE_DEL_ARCHIVO: input_decorations.dart
CONTENIDO:
import 'package:flutter/material.dart';
import '../Colors/app_colors.dart';

class InputDecorations {
  static InputDecoration authInputDecoration({
    required String hintText,
    required String labelText,
    IconData? prefixIcon,
  }) {
    return InputDecoration(
      enabledBorder: const UnderlineInputBorder(
        borderSide: BorderSide(
          color: AppColors.accentColor, // Cambiado a accentColor de AppColors
        ),
      ),
      focusedBorder: const UnderlineInputBorder(
        borderSide: BorderSide(
          color: AppColors.accentColor, // Cambiado a accentColor de AppColors
          width: 2,
        ),
      ),
      hintText: hintText,
      labelText: labelText,
      labelStyle: const TextStyle(
        color: Colors.black,
      ),
      prefixIcon: prefixIcon != null
          ? Icon(
              prefixIcon,
              color:
                  AppColors.accentColor, // Cambiado a accentColor de AppColors
            )
          : null,
    );
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\ui\ui.dart
NOMBRE_DEL_ARCHIVO: ui.dart
CONTENIDO:
export '../ui/input_decorations.dart';

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\widgets\auth_background.dart
NOMBRE_DEL_ARCHIVO: auth_background.dart
CONTENIDO:
import 'package:flutter/material.dart';

class AuthBackground extends StatelessWidget {
  final Widget child;

  const AuthBackground({Key? key, required this.child}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: double.infinity,
      height: double.infinity,
      child: Stack(
        children: [
          _PurpleBox(),
          _HeaderIcon(),
          child,
        ],
      ),
    );
  }
}

class _HeaderIcon extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Container(
        width: double.infinity,
        margin: const EdgeInsets.only(top: 30),
        child: const Icon(Icons.person_pin, color: Colors.white, size: 100),
      ),
    );
  }
}

class _PurpleBox extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;

    return Container(
      width: double.infinity,
      height: size.height * 0.4,
      decoration: _purpleBackground(),
      child: Stack(
        children: [
          Positioned(top: 90, left: 30, child: _Bubble()),
          Positioned(top: -40, left: -30, child: _Bubble()),
          Positioned(top: -50, right: -20, child: _Bubble()),
          Positioned(bottom: -50, left: 10, child: _Bubble()),
          Positioned(bottom: 120, right: 20, child: _Bubble()),
        ],
      ),
    );
  }

  BoxDecoration _purpleBackground() => const BoxDecoration(
          gradient: LinearGradient(colors: [
        Color.fromRGBO(63, 63, 156, 1),
        Color.fromRGBO(90, 70, 178, 1)
      ]));
}

class _Bubble extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Container(
      width: 100,
      height: 100,
      decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(100),
          color: const Color.fromRGBO(255, 255, 255, 0.05)),
    );
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\widgets\card_container.dart
NOMBRE_DEL_ARCHIVO: card_container.dart
CONTENIDO:
import 'package:flutter/material.dart';

class CardContainer extends StatelessWidget {
  final Widget child;

  const CardContainer({Key? key, required this.child}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 30),
      child: Container(
        width: double.infinity,
        padding: const EdgeInsets.all(20),
        decoration: _createCardShape(),
        child: child,
      ),
    );
  }

  BoxDecoration _createCardShape() => BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(25),
          boxShadow: const [
            BoxShadow(
              color: Colors.black12,
              blurRadius: 15,
              offset: Offset(0, 5),
            )
          ]);
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\widgets\widgets.dart
NOMBRE_DEL_ARCHIVO: widgets.dart
CONTENIDO:
export '/widgets/card_container.dart';
export '/widgets/auth_background.dart';

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\test\widget_test.dart
NOMBRE_DEL_ARCHIVO: widget_test.dart
CONTENIDO:
/* // This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility in the flutter_test package. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:login/main.dart';

void main() {
  testWidgets('Counter increments smoke test', (WidgetTester tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(const MyApp());

    // Verify that our counter starts at 0.
    expect(find.text('0'), findsOneWidget);
    expect(find.text('1'), findsNothing);

    // Tap the '+' icon and trigger a frame.
    await tester.tap(find.byIcon(Icons.add));
    await tester.pump();

    // Verify that our counter has incremented.
    expect(find.text('0'), findsNothing);
    expect(find.text('1'), findsOneWidget);
  });
}
 */
====================================================================================================RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\.dart_tool\dartpad\web_plugin_registrant.dart
NOMBRE_DEL_ARCHIVO: web_plugin_registrant.dart
CONTENIDO:
// Flutter web plugin registrant file.
//
// Generated file. Do not edit.
//

// @dart = 2.13
// ignore_for_file: type=lint

import 'package:flutter_secure_storage_web/flutter_secure_storage_web.dart';
import 'package:flutter_web_plugins/flutter_web_plugins.dart';

void registerPlugins([final Registrar? pluginRegistrar]) {
  final Registrar registrar = pluginRegistrar ?? webPluginRegistrar;
  FlutterSecureStorageWeb.registerWith(registrar);
  registrar.registerMessageHandler();
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\.dart_tool\flutter_build\dart_plugin_registrant.dart
NOMBRE_DEL_ARCHIVO: dart_plugin_registrant.dart
CONTENIDO:
//
// Generated file. Do not edit.
// This file is generated from template in file `flutter_tools/lib/src/flutter_plugins.dart`.
//

// @dart = 3.1

import 'dart:io'; // flutter_ignore: dart_io_import.
import 'package:path_provider_android/path_provider_android.dart';
import 'package:path_provider_foundation/path_provider_foundation.dart';
import 'package:path_provider_linux/path_provider_linux.dart';
import 'package:path_provider_foundation/path_provider_foundation.dart';
import 'package:flutter_secure_storage_windows/flutter_secure_storage_windows.dart';
import 'package:path_provider_windows/path_provider_windows.dart';

@pragma('vm:entry-point')
class _PluginRegistrant {

  @pragma('vm:entry-point')
  static void register() {
    if (Platform.isAndroid) {
      try {
        PathProviderAndroid.registerWith();
      } catch (err) {
        print(
          '`path_provider_android` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isIOS) {
      try {
        PathProviderFoundation.registerWith();
      } catch (err) {
        print(
          '`path_provider_foundation` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isLinux) {
      try {
        PathProviderLinux.registerWith();
      } catch (err) {
        print(
          '`path_provider_linux` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isMacOS) {
      try {
        PathProviderFoundation.registerWith();
      } catch (err) {
        print(
          '`path_provider_foundation` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    } else if (Platform.isWindows) {
      try {
        FlutterSecureStorageWindows.registerWith();
      } catch (err) {
        print(
          '`flutter_secure_storage_windows` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

      try {
        PathProviderWindows.registerWith();
      } catch (err) {
        print(
          '`path_provider_windows` threw an error: $err. '
          'The app may not function as expected until you remove this plugin from pubspec.yaml'
        );
      }

    }
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\main.dart
NOMBRE_DEL_ARCHIVO: main.dart
CONTENIDO:
// main.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import 'screens/screens.dart';
import 'services/services.dart';
import 'providers/providers.dart';

void main() => runApp(
      MultiProvider(
        providers: [
          ChangeNotifierProvider(create: (_) => AuthService()),
          ChangeNotifierProvider(create: (_) => TemaManager()),
        ],
        child: const AppState(),
      ),
    );

class AppState extends StatelessWidget {
  const AppState({super.key});

  @override
  Widget build(BuildContext context) {
    return const MyApp();
  }
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'LOGIN TO MY APP',
      initialRoute: 'home',
      routes: {
        'checking': (_) => const CheckAuthScreen(),
        'home': (_) => const HomeScreen(),
        'login': (_) => const LoginScreen(),
        'main': (_) => const MainScreen(),
        'register': (_) => const RegistrarScreen(),
      },
      scaffoldMessengerKey: NotificationsService.messengerKey,
      theme: _getTheme(context),
    );
  }

  ThemeData _getTheme(BuildContext context) {
    final temaManager = Provider.of<TemaManager>(context);

    return temaManager.tema.copyWith(
      scaffoldBackgroundColor: Colors.black54,
      appBarTheme: const AppBarTheme(elevation: 0, color: Colors.redAccent),
      floatingActionButtonTheme: const FloatingActionButtonThemeData(
        backgroundColor: Colors.redAccent,
        elevation: 0,
      ),
    );
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\Colors\app_colors.dart
NOMBRE_DEL_ARCHIVO: app_colors.dart
CONTENIDO:
import 'package:flutter/material.dart';

class AppColors {
  // Colores para el tema original
  static const Color primaryColor = Color(0xFFAD5D5D); // Rojo oscuro
  static const Color accentColor = Color(0xFFD8AE47); // Amarillo oscuro
  static const Color secondaryColor = Color(0xFF92B6D5); // Azul claro/oscuro
  static const Color buttonGreenColor = Color(0xFF006E51); // Verde oscuro
  static const Color buttonBrownColor =
      Color(0xFFAF947E); // MarrÃ³n claro/oscuro

  // Colores para el tema de hielo
  static const Color icePrimaryColor = Color(0xFF64B5F6); // Azul claro
  static const Color iceAccentColor = Color(0xFF1976D2); // Azul mÃ¡s oscuro
  static const Color iceSecondaryColor = Color(0xFF455A64); // Gris azulado
  static const Color iceButtonGreenColor = Color(0xFF00E676); // Verde claro

  // Colores para el tema de fuego
  static const Color firePrimaryColor = Color(0xFFFF7043); // Naranja claro
  static const Color fireAccentColor = Color(0xFFFF3D00); // Naranja mÃ¡s oscuro
  static const Color fireSecondaryColor = Color(0xFFBDBDBD); // Gris claro
  static const Color fireButtonGreenColor = Color(0xFF388E3C); // Verde oscuro

  // Estilos de texto para cada tema
  static const TextStyle titulo = TextStyle(
    fontSize: 24,
    fontWeight: FontWeight.bold,
    color: Colors.white,
  );

  static const TextStyle subtitulo = TextStyle(
    fontSize: 18,
    fontWeight: FontWeight.normal,
    color: Colors.white,
  );

  static const TextStyle botonTexto = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.bold,
    color: Colors.white,
  );

  static const TextStyle hintTexto = TextStyle(
    fontSize: 16,
    color: Colors.grey,
  );
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\providers\login_provider.dart
NOMBRE_DEL_ARCHIVO: login_provider.dart
CONTENIDO:
// login_provider.dart

// ignore_for_file: avoid_print

import 'package:flutter/material.dart';

class LoginFormProvider extends ChangeNotifier {
  GlobalKey<FormState> formKey = GlobalKey<FormState>();

  String email = '';
  String password = '';

  bool _isLoading = false;
  bool get isLoading => _isLoading;

  set isLoading(bool value) {
    _isLoading = value;
    notifyListeners();
  }

  bool isValidForm() {
    print(formKey.currentState?.validate());

    print('$email - $password');

    return formKey.currentState?.validate() ?? false;
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\providers\providers.dart
NOMBRE_DEL_ARCHIVO: providers.dart
CONTENIDO:
export '../providers/login_provider.dart';
export '../providers/theme_color_provider.dart';

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\providers\theme_color_provider.dart
NOMBRE_DEL_ARCHIVO: theme_color_provider.dart
CONTENIDO:
import 'package:flutter/material.dart';
import '../Colors/app_colors.dart';

class TemaManager extends ChangeNotifier {
  late ThemeData _tema;
  late String _imagenTema;

  TemaManager() {
    _tema = _obtenerTemaOriginal();
    _imagenTema = 'assets/imgs/normal.jpg';
  }

  ThemeData get tema => _tema;
  String get imagenTema => _imagenTema;

  ThemeData _obtenerTemaOriginal() {
    return ThemeData(
      scaffoldBackgroundColor: AppColors.primaryColor,
      textTheme: _obtenerTextoTemaOriginal(),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: AppColors.buttonGreenColor,
        ),
      ),
    );
  }

  ThemeData _obtenerTemaHielo() {
    _imagenTema = 'assets/imgs/ice.jpg';
    return ThemeData(
      scaffoldBackgroundColor: AppColors.icePrimaryColor,
      textTheme: _obtenerTextoTemaHielo(),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: AppColors.iceButtonGreenColor,
        ),
      ),
    );
  }

  ThemeData _obtenerTemaFuego() {
    _imagenTema = 'assets/imgs/fire.jpg';
    return ThemeData(
      scaffoldBackgroundColor: AppColors.firePrimaryColor,
      textTheme: _obtenerTextoTemaFuego(),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: AppColors.fireButtonGreenColor,
        ),
      ),
    );
  }

  TextTheme _obtenerTextoTemaOriginal() {
    return const TextTheme(
      displayLarge: AppColors.titulo,
      displayMedium: AppColors.subtitulo,
      labelLarge: AppColors.botonTexto,
      bodyMedium: AppColors.hintTexto,
    );
  }

  TextTheme _obtenerTextoTemaHielo() {
    return TextTheme(
      displayLarge: AppColors.titulo.copyWith(color: Colors.white),
      displayMedium: AppColors.subtitulo.copyWith(color: Colors.white),
      labelLarge: AppColors.botonTexto.copyWith(color: Colors.white),
      bodyMedium: AppColors.hintTexto,
    );
  }

  TextTheme _obtenerTextoTemaFuego() {
    return TextTheme(
      displayLarge:
          AppColors.titulo.copyWith(fontSize: 26, color: Colors.orange),
      displayMedium:
          AppColors.subtitulo.copyWith(fontSize: 20, color: Colors.orange),
      labelLarge: AppColors.botonTexto.copyWith(color: Colors.white),
      bodyMedium: AppColors.hintTexto,
    );
  }

  void cambiarTema(Tema nuevoTema) {
    switch (nuevoTema) {
      case Tema.original:
        _tema = _obtenerTemaOriginal();
        break;
      case Tema.hielo:
        _tema = _obtenerTemaHielo();
        break;
      case Tema.fuego:
        _tema = _obtenerTemaFuego();
        break;
    }
    notifyListeners();
  }
}

enum Tema { original, hielo, fuego }

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\screens\check_auth_screen.dart
NOMBRE_DEL_ARCHIVO: check_auth_screen.dart
CONTENIDO:
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '/services/services.dart';
import 'screens.dart';

class CheckAuthScreen extends StatelessWidget {
  const CheckAuthScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<AuthService>(context, listen: false);

    return Scaffold(
      body: Center(
        child: FutureBuilder(
          future: authService.readToken(),
          builder: (BuildContext context, AsyncSnapshot<String> snapshot) {
            if (!snapshot.hasData) return const Text('');

            if (snapshot.data == '') {
              Future.microtask(() {
                Navigator.pushReplacement(
                    context,
                    PageRouteBuilder(
                        pageBuilder: (_, __, ___) => const LoginScreen(),
                        transitionDuration: const Duration(seconds: 0)));
              });
            } else {
              Future.microtask(() {
                Navigator.pushReplacement(
                    context,
                    PageRouteBuilder(
                        pageBuilder: (_, __, ___) => const HomeScreen(),
                        transitionDuration: const Duration(seconds: 0)));
              });
            }

            return Container();
          },
        ),
      ),
    );
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\screens\home_screen.dart
NOMBRE_DEL_ARCHIVO: home_screen.dart
CONTENIDO:
// ignore_for_file: prefer_const_constructors, sort_child_properties_last

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'login_screen.dart';
import 'registrar_screen.dart';
import '/Colors/app_colors.dart';
import '/providers/providers.dart';

class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('My App'),
        backgroundColor: AppColors.primaryColor,
        actions: [
          // BotÃ³n para cambiar el tema
          IconButton(
            icon: const Icon(Icons.palette),
            onPressed: () {
              _mostrarDialogoCambioTema(context);
            },
          ),
        ],
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text(
              'WELCOME',
              style: TextStyle(
                fontSize: 30,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 20),
            Image.asset(
              'assets/imgs/login.jpg',
              height: 300,
              width: 300,
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const LoginScreen()),
                );
              },
              child: const Text('LOGIN'),
              style: ElevatedButton.styleFrom(
                backgroundColor: AppColors.buttonGreenColor,
              ),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                      builder: (context) => const RegistrarScreen()),
                );
              },
              child: const Text('REGISTRARSE'),
              style: ElevatedButton.styleFrom(
                backgroundColor: AppColors.buttonBrownColor,
              ),
            ),
          ],
        ),
      ),
    );
  }

  // MÃ©todo para mostrar un diÃ¡logo para cambiar el tema
  void _mostrarDialogoCambioTema(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('Cambiar tema'),
          content: Column(
            children: [
              ListTile(
                title: const Text('Original'),
                onTap: () {
                  _cambiarTema(context, Tema.original);
                },
              ),
              ListTile(
                title: const Text('Hielo'),
                onTap: () {
                  _cambiarTema(context, Tema.hielo);
                },
              ),
              ListTile(
                title: const Text('Fuego'),
                onTap: () {
                  _cambiarTema(context, Tema.fuego);
                },
              ),
            ],
          ),
        );
      },
    );
  }

  // MÃ©todo para cambiar el tema usando TemaManager
  void _cambiarTema(BuildContext context, Tema nuevoTema) {
    final temaManager = Provider.of<TemaManager>(context, listen: false);
    temaManager.cambiarTema(nuevoTema);

    // Cerrar el diÃ¡logo
    Navigator.pop(context);
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\screens\login_screen.dart
NOMBRE_DEL_ARCHIVO: login_screen.dart
CONTENIDO:
// ignore_for_file: prefer_const_constructors, unnecessary_new, sort_child_properties_last, use_build_context_synchronously

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '../providers/login_provider.dart';
import '../services/services.dart';
import '../ui/input_decorations.dart';
import '../widgets/widgets.dart';
import '../Colors/app_colors.dart';

class LoginScreen extends StatelessWidget {
  const LoginScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: Column(
          children: [
            const SizedBox(height: 250),
            CardContainer(
              child: Column(
                children: [
                  const SizedBox(height: 10),
                  Text('Login',
                      style: Theme.of(context).textTheme.headlineMedium),
                  const SizedBox(height: 30),
                  ChangeNotifierProvider(
                    create: (_) => LoginFormProvider(),
                    child: _LoginForm(),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 50),
            TextButton(
              onPressed: () =>
                  Navigator.pushReplacementNamed(context, 'register'),
              style: ButtonStyle(
                overlayColor: MaterialStateProperty.all(
                  AppColors.buttonBrownColor.withOpacity(0.1),
                ),
                shape: MaterialStateProperty.all(StadiumBorder()),
              ),
              child: const Text(
                'Crear una nueva cuenta',
                style:
                    TextStyle(fontSize: 18, color: AppColors.firePrimaryColor),
              ),
            ),
            const SizedBox(height: 50),
          ],
        ),
      ),
    );
  }
}

class _LoginForm extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final loginForm = Provider.of<LoginFormProvider>(context);

    return Form(
      key: loginForm.formKey,
      autovalidateMode: AutovalidateMode.onUserInteraction,
      child: Column(
        children: [
          TextFormField(
            autocorrect: false,
            keyboardType: TextInputType.emailAddress,
            decoration: InputDecorations.authInputDecoration(
              hintText: 'test1@email.com',
              labelText: 'Correo electrÃ³nico',
              prefixIcon: Icons.alternate_email_rounded,
            ),
            onChanged: (value) => loginForm.email = value,
            validator: (value) {
              String pattern =
                  r'^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$';
              RegExp regExp = new RegExp(pattern);

              return regExp.hasMatch(value ?? '')
                  ? null
                  : 'El valor ingresado no luce como un correo';
            },
          ),
          const SizedBox(height: 30),
          TextFormField(
            autocorrect: false,
            obscureText: true,
            keyboardType: TextInputType.emailAddress,
            decoration: InputDecorations.authInputDecoration(
              hintText: 'Test1@',
              labelText: 'ContraseÃ±a',
              prefixIcon: Icons.lock_outline,
            ),
            onChanged: (value) => loginForm.password = value,
            validator: (value) {
              return (value != null && value.length >= 6)
                  ? null
                  : 'La contraseÃ±a debe ser de 6 caracteres';
            },
          ),
          const SizedBox(height: 30),
          MaterialButton(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(10),
            ),
            disabledColor: AppColors.accentColor,
            elevation: 0,
            color: AppColors.buttonGreenColor,
            child: Container(
              padding: EdgeInsets.symmetric(horizontal: 80, vertical: 15),
              child: Text(
                loginForm.isLoading ? 'Espere' : 'Ingresar',
                style: TextStyle(color: AppColors.fireSecondaryColor),
              ),
            ),
            onPressed: loginForm.isLoading
                ? null
                : () async {
                    FocusScope.of(context).unfocus();
                    final authService =
                        Provider.of<AuthService>(context, listen: false);

                    if (!loginForm.isValidForm()) return;

                    loginForm.isLoading = true;

                    final String? errorMessage = await authService.login(
                      loginForm.email,
                      loginForm.password,
                    );

                    if (errorMessage == null) {
                      Navigator.pushReplacementNamed(context, 'main');
                    } else {
                      NotificationsService.showSnackbar(errorMessage);
                      loginForm.isLoading = false;
                    }
                  },
          ),
        ],
      ),
    );
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\screens\main_screen.dart
NOMBRE_DEL_ARCHIVO: main_screen.dart
CONTENIDO:
import 'package:flutter/material.dart';

class MainScreen extends StatelessWidget {
  const MainScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Welcome Hunter'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Image.asset(
              'assets/imgs/welcome.gif',
              height: 300,
              width: 300,
            ),
            const SizedBox(height: 20),
            const Text(
              'Estas dentro de la App',
              style: TextStyle(
                fontSize: 30,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\screens\registrar_screen.dart
NOMBRE_DEL_ARCHIVO: registrar_screen.dart
CONTENIDO:
// ignore_for_file: prefer_const_constructors, sort_child_properties_last, avoid_print, use_build_context_synchronously

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '../Colors/app_colors.dart';
import '../providers/login_provider.dart';
import '../services/services.dart';
import '../ui/input_decorations.dart';
import '../widgets/widgets.dart';

class RegistrarScreen extends StatelessWidget {
  const RegistrarScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Registrar'),
        backgroundColor: AppColors.secondaryColor,
      ),
      body: SingleChildScrollView(
        child: Column(
          children: [
            SizedBox(height: 250),
            CardContainer(
              child: Column(
                children: [
                  SizedBox(height: 10),
                  Text(
                    'Crear cuenta',
                    style: Theme.of(context).textTheme.headlineMedium,
                  ),
                  SizedBox(height: 30),
                  ChangeNotifierProvider(
                    create: (_) => LoginFormProvider(),
                    child: _LoginForm(),
                  ),
                ],
              ),
            ),
            SizedBox(height: 50),
            TextButton(
              onPressed: () => Navigator.pushReplacementNamed(context, 'login'),
              style: ButtonStyle(
                overlayColor: MaterialStateProperty.all(
                  AppColors.fireAccentColor.withOpacity(0.1),
                ),
                shape: MaterialStateProperty.all(StadiumBorder()),
              ),
              child: Text(
                'Â¿Ya tienes una cuenta?',
                style:
                    TextStyle(fontSize: 18, color: AppColors.iceSecondaryColor),
              ),
            ),
            SizedBox(height: 50),
          ],
        ),
      ),
    );
  }
}

class _LoginForm extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final loginForm = Provider.of<LoginFormProvider>(context);

    return Form(
      key: loginForm.formKey,
      autovalidateMode: AutovalidateMode.onUserInteraction,
      child: Column(
        children: [
          TextFormField(
            autocorrect: false,
            keyboardType: TextInputType.emailAddress,
            decoration: InputDecorations.authInputDecoration(
                hintText: 'test1@email.com',
                labelText: 'Correo electrÃ³nico',
                prefixIcon: Icons.alternate_email_rounded),
            onChanged: (value) => loginForm.email = value,
            validator: (value) {
              String pattern =
                  r'^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$';
              RegExp regExp = RegExp(pattern);

              return regExp.hasMatch(value ?? '')
                  ? null
                  : 'El valor ingresado no luce como un correo';
            },
          ),
          SizedBox(height: 30),
          TextFormField(
            autocorrect: false,
            obscureText: true,
            keyboardType: TextInputType.emailAddress,
            decoration: InputDecorations.authInputDecoration(
                hintText: 'Test1@',
                labelText: 'ContraseÃ±a',
                prefixIcon: Icons.lock_outline),
            onChanged: (value) => loginForm.password = value,
            validator: (value) {
              return (value != null && value.length >= 6)
                  ? null
                  : 'La contraseÃ±a debe de ser de 6 caracteres';
            },
          ),
          SizedBox(height: 30),
          MaterialButton(
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10)),
              disabledColor: AppColors.iceSecondaryColor,
              elevation: 0,
              color: AppColors.primaryColor,
              child: Container(
                  padding: EdgeInsets.symmetric(horizontal: 80, vertical: 15),
                  child: Text(
                    loginForm.isLoading ? 'Espere' : 'Ingresar',
                    style: TextStyle(color: AppColors.iceSecondaryColor),
                  )),
              onPressed: loginForm.isLoading
                  ? null
                  : () async {
                      FocusScope.of(context).unfocus();
                      final authService =
                          Provider.of<AuthService>(context, listen: false);

                      if (!loginForm.isValidForm()) return;

                      loginForm.isLoading = true;
                      final String? errorMessage = await authService.createUser(
                          loginForm.email, loginForm.password);
                      if (errorMessage == null) {
                        Navigator.pushReplacementNamed(context, 'main');
                      } else {
                        //print(errorMessage);
                        loginForm.isLoading = false;
                      }
                    })
        ],
      ),
    );
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\screens\screens.dart
NOMBRE_DEL_ARCHIVO: screens.dart
CONTENIDO:
export 'package:login/screens/home_screen.dart';
export '/screens/login_screen.dart';
export '/screens/registrar_screen.dart';
export '/screens/check_auth_screen.dart';
export '/screens/main_screen.dart';

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\services\auth_services.dart
NOMBRE_DEL_ARCHIVO: auth_services.dart
CONTENIDO:
// ignore_for_file: avoid_print

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:http/http.dart' as http;

class AuthService extends ChangeNotifier {
  final String _baseUrl = 'loginprueba.somee.com';

  final storage = const FlutterSecureStorage();

  // Si retornamos algo, es un error, si no, todo bien!
  Future<String?> createUser(String email, String password) async {
    final Map<String, dynamic> authData = {
      'email': email,
      'password': password,
    };

    final url = Uri.http(_baseUrl, '/api/Cuentas/registrar');

    final resp = await http.post(url,
        headers: {"Content-Type": "application/json"},
        body: json.encode(authData));

    print('Response body: ${resp.body}');
    final Map<String, dynamic> decodedResp = json.decode(resp.body);

    if (decodedResp.containsKey('token')) {
      // Token hay que guardarlo en un lugar seguro
      await storage.write(key: 'token', value: decodedResp['token']);
      return null;
    } else {
      return decodedResp['error']['message'];
    }
  }

  Future<String?> login(String email, String password) async {
    final Map<String, dynamic> authData = {
      'email': email,
      'password': password
    };
    final url = Uri.http(_baseUrl, '/api/Cuentas/Login');

    final resp = await http.post(url,
        headers: {"Content-Type": "application/json"},
        body: json.encode(authData));

    final Map<String, dynamic> decodedResp = json.decode(resp.body);

    if (decodedResp.containsKey('token')) {
      // Token hay que guardarlo en un lugar seguro
      await storage.write(key: 'token', value: decodedResp['token']);
      return null;
    } else {
      return decodedResp['error']['message'];
    }
  }

  Future logout() async {
    await storage.delete(key: 'token');
    return;
  }

  Future<String> readToken() async {
    return await storage.read(key: 'token') ?? '';
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\services\notifications_services.dart
NOMBRE_DEL_ARCHIVO: notifications_services.dart
CONTENIDO:
import 'package:flutter/material.dart';

class NotificationsService {
  static GlobalKey<ScaffoldMessengerState> messengerKey =
      GlobalKey<ScaffoldMessengerState>();

  static showSnackbar(String message) {
    final snackBar = SnackBar(
      content: Text(
        message,
        style: const TextStyle(
          color: Colors.white,
          fontSize: 20,
        ),
      ),
    );
    messengerKey.currentState!.showSnackBar(snackBar);
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\services\services.dart
NOMBRE_DEL_ARCHIVO: services.dart
CONTENIDO:
export '/services/notifications_services.dart';
export '/services/auth_services.dart';

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\ui\input_decorations.dart
NOMBRE_DEL_ARCHIVO: input_decorations.dart
CONTENIDO:
import 'package:flutter/material.dart';
import '../Colors/app_colors.dart';

class InputDecorations {
  static InputDecoration authInputDecoration({
    required String hintText,
    required String labelText,
    IconData? prefixIcon,
  }) {
    return InputDecoration(
      enabledBorder: const UnderlineInputBorder(
        borderSide: BorderSide(
          color: AppColors.accentColor, // Cambiado a accentColor de AppColors
        ),
      ),
      focusedBorder: const UnderlineInputBorder(
        borderSide: BorderSide(
          color: AppColors.accentColor, // Cambiado a accentColor de AppColors
          width: 2,
        ),
      ),
      hintText: hintText,
      labelText: labelText,
      labelStyle: const TextStyle(
        color: Colors.black,
      ),
      prefixIcon: prefixIcon != null
          ? Icon(
              prefixIcon,
              color:
                  AppColors.accentColor, // Cambiado a accentColor de AppColors
            )
          : null,
    );
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\ui\ui.dart
NOMBRE_DEL_ARCHIVO: ui.dart
CONTENIDO:
export '../ui/input_decorations.dart';

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\widgets\auth_background.dart
NOMBRE_DEL_ARCHIVO: auth_background.dart
CONTENIDO:
import 'package:flutter/material.dart';

class AuthBackground extends StatelessWidget {
  final Widget child;

  const AuthBackground({Key? key, required this.child}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: double.infinity,
      height: double.infinity,
      child: Stack(
        children: [
          _PurpleBox(),
          _HeaderIcon(),
          child,
        ],
      ),
    );
  }
}

class _HeaderIcon extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Container(
        width: double.infinity,
        margin: const EdgeInsets.only(top: 30),
        child: const Icon(Icons.person_pin, color: Colors.white, size: 100),
      ),
    );
  }
}

class _PurpleBox extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;

    return Container(
      width: double.infinity,
      height: size.height * 0.4,
      decoration: _purpleBackground(),
      child: Stack(
        children: [
          Positioned(top: 90, left: 30, child: _Bubble()),
          Positioned(top: -40, left: -30, child: _Bubble()),
          Positioned(top: -50, right: -20, child: _Bubble()),
          Positioned(bottom: -50, left: 10, child: _Bubble()),
          Positioned(bottom: 120, right: 20, child: _Bubble()),
        ],
      ),
    );
  }

  BoxDecoration _purpleBackground() => const BoxDecoration(
          gradient: LinearGradient(colors: [
        Color.fromRGBO(63, 63, 156, 1),
        Color.fromRGBO(90, 70, 178, 1)
      ]));
}

class _Bubble extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Container(
      width: 100,
      height: 100,
      decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(100),
          color: const Color.fromRGBO(255, 255, 255, 0.05)),
    );
  }
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\widgets\card_container.dart
NOMBRE_DEL_ARCHIVO: card_container.dart
CONTENIDO:
import 'package:flutter/material.dart';

class CardContainer extends StatelessWidget {
  final Widget child;

  const CardContainer({Key? key, required this.child}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 30),
      child: Container(
        width: double.infinity,
        padding: const EdgeInsets.all(20),
        decoration: _createCardShape(),
        child: child,
      ),
    );
  }

  BoxDecoration _createCardShape() => BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(25),
          boxShadow: const [
            BoxShadow(
              color: Colors.black12,
              blurRadius: 15,
              offset: Offset(0, 5),
            )
          ]);
}

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\lib\widgets\widgets.dart
NOMBRE_DEL_ARCHIVO: widgets.dart
CONTENIDO:
export '/widgets/card_container.dart';
export '/widgets/auth_background.dart';

====================================================================================================
RUTA_DEL_ARCHIVO: C:/Users/zerom/Downloads/VS Code/login/login\test\widget_test.dart
NOMBRE_DEL_ARCHIVO: widget_test.dart
CONTENIDO:
/* // This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility in the flutter_test package. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:login/main.dart';

void main() {
  testWidgets('Counter increments smoke test', (WidgetTester tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(const MyApp());

    // Verify that our counter starts at 0.
    expect(find.text('0'), findsOneWidget);
    expect(find.text('1'), findsNothing);

    // Tap the '+' icon and trigger a frame.
    await tester.tap(find.byIcon(Icons.add));
    await tester.pump();

    // Verify that our counter has incremented.
    expect(find.text('0'), findsNothing);
    expect(find.text('1'), findsOneWidget);
  });
}
 */
====================================================================================================